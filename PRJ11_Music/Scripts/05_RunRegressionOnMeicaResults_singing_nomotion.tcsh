#!/bin/tcsh -xef
# 05_RunRegressionOnMeicaResults_singing_nomotion
#
# USAGE:
#   tcsh -xef 05_RunRegressionOnMeicaResults_singing_nomotion.tcsh $subj $nRuns $echoTimes $outFolder 2>&1 | tee output.05_RunRegressionOnMeicaResults.$subj.$outFolder
#
# INPUTS:
# 	- subj is a string indicating the subject ID (default: SBJ05)
#	  - nRuns is a scalar indicating how many runs are included (e.g., 4)
#   - echoTimes is a string with 3 comma-separated values for the echo times in ms
#   - outFolder is a string indicating the name of the folder where output should be placed
#
# OUTPUTS:
#	- Many, many files.
#
# Created 11/16/15 by afni_proc.py
# Updated 11/17/15 by DJ - adapted to Multi-echo data.
# Updated 11/18/15 by DJ - debugged, switched meica_report's motion input to tlrc space
# Updated 11/20/15 by DJ - separated afni_proc output into 3 scripts: pre-meica, MEICA swarm, and post-meica. That way all 3 can be submitted to Biowulf with the proper dependencies.
# Updated 12/17/15 by DJ - hard-coded hack to work with nRuns=4, 5, or 6.
# Updated 5/2/16 by DJ - hard-coded nRuns=3 option
# Updated 9/1/16 by DJ - removed band-pass filters, added cbucket output
# Updated 9/9/16 by DJ - added scaling before 3dDeconvolve, added stim regressors & glts, use 3dREMLfit, modified 3dTproject to ignore stim regressors.
# Updated 9/12/16 by DJ - added tlrc block near end
# Updated 9/15/16 by DJ - removed tlrc block again, switched to +tlrc datasets, removed fitts and errts flags in 3dDeconvolve
# Updated 9/22/16 by DJ - moved mask block here from 02, switched full_mask to use meica output automasks.
# Updated 4/20/17 by DJ - added separate 3dDeconvolve for each condition, changed motion censor limit from 0.2 to 0.8
# Updated 5/11/17 by DJ - tried w/ no motion regression

# ============================== DISPLAY INFO ==============================

echo "auto-generated by afni_proc.py, Mon Nov 16 16:01:44 2015"
echo "(version 4.21, September 8, 2014)"
echo "modified manually for multi-echo data" # MULTIECHO notice
echo "execution started: `date`"


# =========================== auto block: setup ============================
# script setup

# take note of the AFNI version
afni -ver

# check that the current AFNI version is recent enough
afni_history -check_date 13 May 2014
if ( $status ) then
    echo "** this script requires newer AFNI binaries (than 13 May 2014)"
    echo "   (consider: @update.afni.binaries -defaults)"
    exit
endif

# the user may specify a single subject to run with
if ( $#argv > 0 ) then
    set subj = $argv[1]
else
    set subj = SBJ05
endif
if ( $#argv > 1 ) then
    set nRuns = $argv[2]
else
    set nRuns = 0 # code for "determine automatically"
endif
if ( $#argv > 2 ) then
    set echoTimes = $argv[3]
else
    set echoTimes = "11.0,23.96,36.92"
endif
if ( $#argv > 3 ) then
    set outFolder = $argv[4]
else
    set outFolder = AfniProc_MultiEcho
endif

set motionLimit = 0.8 # 0.2 # max motion in a TR before it's censored (default 0.2)
set outCountLimit = 0.15 #0.1 # fraction of voxels that can be outliers before censoring a TR (default 0.1)

# assign base directory
set PRJDIR = /data/jangrawdc/PRJ11_Music

# assign output directory name
set output_dir = ${PRJDIR}/Results/${subj}/${outFolder}

# -------------------------------------------------------
# enter the results directory (can begin processing data)
cd $output_dir

# find nRuns automatically if it was not given as input
if ( $nRuns == 0 ) then
    set nRuns = (`ls pb05.$subj.r*.meica.nii | wc -w`)
endif

# set list of runs
set runs = (`count -digits 2 1 ${nRuns}`)
set echoes = (`count -digits 1 1 3`) # MULTIECHO
set iRegEcho = 2 # MULTIECHO

# make note of repetitions (TRs) per run
# set tr_counts = ( 237 237 237 237 )
set nTRs = `3dinfo -nv pb00.$subj.r${runs[1]}_e${echoes[1]}.tcat`
set tr_counts = (`yes $nTRs | head -n $nRuns`)

# note TRs that were not censored
set ktrs = `1d_tool.py -infile censor_${subj}_combined_2.1D                   \
                       -show_trs_uncensored encoded`

# ------------------------------
# run the regression analysis
# MULTIECHO: use output from MEICA as input
if ( $subj == SBJ03_baseline ) then
3dDeconvolve -input pb06.${subj}.r*.scale+tlrc.HEAD                           \
    -censor censor_${subj}_combined_2.1D                                      \
    -polort 1                                                                 \
    -global_times                                                             \
    -num_stimts 1                                                            \
    -stim_times_AM1 1 ../stimuli/${subj}_Listen.1D 'dmBLOCK4(1)' -stim_label 1 listen \
    -fout -tout -x1D nm.X.xmat.1D -xjpeg nm.X.jpg                                   \
    -x1D_uncensored nm.X.nocensor.xmat.1D                                        \
    -x1D_stop                                                                 \
    -errts nm.errts.$subj                                                        \
    -bucket nm.stats.$subj                                                       \
    -cbucket nm.cbucket.$subj                                                    \
    -jobs 32 \
    -overwrite

# Declare number of nuisance regressors, excluding stimulus regressors
set iLastNuisanceReg = 3 # total regressors + 2*nRuns (polorts) - 1 (stim regressors) - 1 (zero-based)

else if ( $subj == SBJ03_improv ) then
3dDeconvolve -input pb06.${subj}.r*.scale+tlrc.HEAD                           \
    -censor censor_${subj}_combined_2.1D                                      \
    -polort 1                                                                 \
    -global_times                                                             \
    -num_stimts 1                                                            \
    -stim_times_AM1 1 ../stimuli/${subj}_Improvise.1D 'dmBLOCK4(1)' -stim_label 1 improvise \
    -fout -tout -x1D nm.X.xmat.1D -xjpeg nm.X.jpg                                   \
    -x1D_uncensored nm.X.nocensor.xmat.1D                                        \
    -x1D_stop                                                                 \
    -errts nm.errts.$subj                                                        \
    -bucket nm.stats.$subj                                                       \
    -cbucket nm.cbucket.$subj                                                    \
    -jobs 32 \
    -overwrite

# Declare number of nuisance regressors, excluding stimulus regressors
set iLastNuisanceReg = 1 # total regressors + 2*nRuns (polorts) - 1 (stim regressors) - 1 (zero-based)

else if ( $subj == SBJ03_wholesong ) then
3dDeconvolve -input pb06.${subj}.r*.scale+tlrc.HEAD                           \
    -censor censor_${subj}_combined_2.1D                                      \
    -polort 4                                                                 \
    -global_times                                                             \
    -num_stimts 0                                                            \
    -fout -tout -x1D nm.X.xmat.1D -xjpeg nm.X.jpg                                   \
    -x1D_uncensored nm.X.nocensor.xmat.1D                                        \
    -x1D_stop                                                                 \
    -errts nm.errts.$subj                                                        \
    -bucket nm.stats.$subj                                                       \
    -cbucket nm.cbucket.$subj                                                    \
    -jobs 32 \
    -overwrite

# Declare number of nuisance regressors, excluding stimulus regressors
set iLastNuisanceReg = 4 # total regressors + 5*nRuns (polorts) - 0 (stim regressors) - 1 (zero-based)

else if ( $subj == SBJ03_task ) then
3dDeconvolve -input pb06.${subj}.r*.scale+tlrc.HEAD                               \
    -censor censor_${subj}_combined_2.1D                                      \
    -polort 4                                                                 \
    -global_times                                                             \
    -num_stimts 3                                                            \
    -stim_times_AM1 1 ../stimuli/${subj}_Sing.1D 'dmBLOCK4(1)' -stim_label 1 sing \
    -stim_times_AM1 2 ../stimuli/${subj}_Speak.1D 'dmBLOCK4(1)' -stim_label 2 speak \
    -stim_times_AM1 3 ../stimuli/${subj}_Imagine.1D 'dmBLOCK4(1)' -stim_label 3 imagine \
    -fout -tout -x1D nm.X.xmat.1D -xjpeg nm.X.jpg                                   \
    -x1D_uncensored nm.X.nocensor.xmat.1D                                        \
    -x1D_stop                                                                 \
    -errts nm.errts.$subj                                                        \
    -bucket nm.stats.$subj                                                       \
    -cbucket nm.cbucket.$subj                                                    \
    -jobs 32 \
    -overwrite

# Declare number of nuisance regressors, excluding stimulus regressors
set iLastNuisanceReg = 39 # total regressors + 5*nRuns (polorts) - 3 (stim regressors) - 1 (zero-based)

endif

# -- use 3dTproject to project out regression matrix WITHOUT STIM REGRESSORS --
# 3dTproject -polort 0 -input pb06.$subj.r*.scale+tlrc.HEAD                    \
#            -censor censor_${subj}_combined_2.1D -cenmode ZERO                 \
#            -ort nm.X.nocensor.xmat.1D[0..${iLastNuisanceReg}] -overwrite -prefix nm.errts.${subj}.tproject


# if 3dDeconvolve fails, terminate the script
if ( $status != 0 ) then
    echo '---------------------------------------'
    echo '** 3dDeconvolve error, failing...'
    echo '   (consider the file 3dDeconvolve.err)'
    exit
endif

# display any large pariwise correlations from the X-matrix
1d_tool.py -show_cormat_warnings -infile nm.X.xmat.1D |& tee nm.out.cormat_warn.txt

# -- execute the 3dREMLfit script, written by 3dDeconvolve --
# Rename and Run 3dREMLfit
mv nm.REML_cmd nm.stats.$subj.REML_cmd
tcsh -x nm.stats.$subj.REML_cmd

# if 3dREMLfit fails, terminate the script
if ( $status != 0 ) then
    echo '---------------------------------------'
    echo '** 3dREMLfit error, failing...'
    exit
endif

# SKIPPED THE REST!!!

# return to parent directory
cd ..

echo "execution finished: `date`"




# ==========================================================================
# script generated by the command:
#
# afni_proc.py -subj_id SBJ05 -dsets SBJ05_Run01_e2+orig.HEAD                 \
#     SBJ05_Run02_e2+orig.HEAD SBJ05_Run03_e2+orig.HEAD                       \
#     SBJ05_Run04_e2+orig.HEAD -out_dir                                       \
#     /data/jangrawdc/PRJ03_SustainedAttention/Results/SBJ05/AfniProc -blocks \
#     despike tshift align tlrc volreg mask regress -copy_anat                \
#     ../D01_Anatomical/SBJ05_Anat_bc_ns -anat_has_skull no                   \
#     -tcat_remove_first_trs 3 -align_opts_aea -giant_move -volreg_base_dset  \
#     'SBJ05_Run01_e2+orig[0]+orig[0]' -volreg_tlrc_warp -mask_segment_anat   \
#     yes -regress_motion_per_run -regress_censor_motion 0.2                  \
#     -regress_censor_outliers 0.1 -regress_bandpass 0.01 0.1                 \
#     -regress_apply_mot_types demean deriv -regress_est_blur_errts -script   \
#     proc_SBJ05_1116_1601 -bash
